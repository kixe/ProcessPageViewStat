<?php namespace ProcessWire;

/**
 * Page View Statistic for ProcessWire
 * Logs page views of the CMS.
 *
 * @author tech-c.net
 * @license Licensed under GNU/GPL v2
 * @link https://tech-c.net/posts/page-view-statistic-for-processwire/
 * @version 1.0.4
 * 
 * @see Forum Thread: https://processwire.com/talk/topic/24189-pageviewstatistic-for-processwire/
 * @see Donate: https://www.paypal.me/techcnet/0usd
 */

class ProcessPageViewStat extends Process implements ConfigurableModule {
  const dbTableMain = 'process_pageviewstat_main';
  const dbTableIp = 'process_pageviewstat_ip';
  const dbTableCountry = 'process_pageviewstat_country';
  const dbTableBrowser = 'process_pageviewstat_browser';
  const dbTableOs = 'process_pageviewstat_os';
  const dbTablePage = 'process_pageviewstat_page';
  const dbTableOrigin = 'process_pageviewstat_origin';
  const PageName = 'processpageviews';
  const PagePermission = 'processpageviews';

  public static function getModuleInfo() {
    return array(
      'title' => 'Page View Statistic',
      'summary' => 'Logs page views of the CMS.',
      'href' => 'https://tech-c.net/posts/page-view-statistic-for-processwire/',
      'author' => 'tech-c.net',
      'version' => 104,
      'icon' => 'signal',
      'autoload' => true,
      'singular' => true);
  }

  public function ___install () {
    $sql = 'CREATE TABLE IF NOT EXISTS '.self::dbTableMain.' ('.
           'id int(10) unsigned NOT NULL AUTO_INCREMENT,'.
           'tm timestamp NOT NULL,'.
           'vt int(10) unsigned,'.
           'ip_id int(10) unsigned,'.
           'country_id int(10) unsigned,'.
           'browser_id int(10) unsigned,'.
           'os_id int(10) unsigned,'.
           'page_id int(10) unsigned,'.
           'origin_id int(10) unsigned,'.
           'PRIMARY KEY(id)'.
           ') ENGINE='.$this->wire('config')->dbEngine.' DEFAULT CHARSET='.$this->wire('config')->dbCharset.';'.

           'CREATE TABLE IF NOT EXISTS '.self::dbTableIp.' ('.
           'id int(10) unsigned NOT NULL AUTO_INCREMENT,'.
           'ip varchar(50),'.
           'PRIMARY KEY(id),'.
           'UNIQUE INDEX(ip)'.
           ') ENGINE='.$this->wire('config')->dbEngine.' DEFAULT CHARSET='.$this->wire('config')->dbCharset.';'.
           
           'CREATE TABLE IF NOT EXISTS '.self::dbTableCountry.' ('.
           'id int(10) unsigned NOT NULL AUTO_INCREMENT,'.
           'country varchar(255),'.
           'countryimg varchar(16),'.
           'PRIMARY KEY(id),'.
           'UNIQUE INDEX(country)'.
           ') ENGINE='.$this->wire('config')->dbEngine.' DEFAULT CHARSET='.$this->wire('config')->dbCharset.';'.

           'CREATE TABLE IF NOT EXISTS '.self::dbTableBrowser.' ('.
           'id int(10) unsigned NOT NULL AUTO_INCREMENT,'.
           'browser varchar(255),'.
           'browserimg varchar(16),'.
           'PRIMARY KEY(id),'.
           'UNIQUE INDEX(browser)'.
           ') ENGINE='.$this->wire('config')->dbEngine.' DEFAULT CHARSET='.$this->wire('config')->dbCharset.';'.

           'CREATE TABLE IF NOT EXISTS '.self::dbTableOs.' ('.
           'id int(10) unsigned NOT NULL AUTO_INCREMENT,'.
           'os varchar(255),'.
           'osimg varchar(16),'.
           'PRIMARY KEY(id),'.
           'UNIQUE INDEX(os)'.
           ') ENGINE='.$this->wire('config')->dbEngine.' DEFAULT CHARSET='.$this->wire('config')->dbCharset.';'.

           'CREATE TABLE IF NOT EXISTS '.self::dbTablePage.' ('.
           'id int(10) unsigned NOT NULL AUTO_INCREMENT,'.
           'page varchar(255),'.
           'PRIMARY KEY(id),'.
           'UNIQUE INDEX(page)'.
           ') ENGINE='.$this->wire('config')->dbEngine.' DEFAULT CHARSET='.$this->wire('config')->dbCharset.';'.

           'CREATE TABLE IF NOT EXISTS '.self::dbTableOrigin.' ('.
           'id int(10) unsigned NOT NULL AUTO_INCREMENT,'.
           'origin varchar(255),'.
           'PRIMARY KEY(id),'.
           'UNIQUE INDEX(origin)'.
           ') ENGINE='.$this->wire('config')->dbEngine.' DEFAULT CHARSET='.$this->wire('config')->dbCharset.';';
    $this->database->query($sql);

    $pages = $this->wire('pages');
    $info = self::getModuleInfo();
    $p = $pages->get('template=admin, name='.self::PageName);
    if ($p->id) {
      $p->delete();
      $this->message('Deleted Page: '.$p->path);
    }
    $page = new Page();
    $page->template = 'admin';
    $page->parent = $pages->get($this->config->adminRootPageID)->child('name=setup');
    $page->title = $info['title'];
    $page->name = self::PageName;
    $page->process = $this;
    $page->save();
    $this->message('Created Page: '.$page->path);

    $p = $this->wire('permissions')->get(self::PagePermission);
    if ($p->id) {
      $p->delete();
      $this->message('Deleted Permission: '.self::PagePermission);
    }
    $permission = new Permission();
    $permission->name = self::PagePermission;
    $permission->title = $info['title'];
    $permission->save();
    $this->message('Created Permission: '.self::PagePermission);
  }

  public function ___uninstall () {
    $sql = 'DROP TABLE IF EXISTS '.self::dbTableMain.';'.
           'DROP TABLE IF EXISTS '.self::dbTableIp.';'.
           'DROP TABLE IF EXISTS '.self::dbTableCountry.';'.
           'DROP TABLE IF EXISTS '.self::dbTableBrowser.';'.
           'DROP TABLE IF EXISTS '.self::dbTableOs.';'.
           'DROP TABLE IF EXISTS '.self::dbTablePage.';'.
           'DROP TABLE IF EXISTS '.self::dbTableOrigin.';';
    $this->database->query($sql);

    $pages = $this->wire('pages');
    $moduleID = $this->wire('modules')->getModuleID($this);
    
    $mbPage = $pages->get('template=admin, process='.$moduleID.', name='.self::PageName);
    if ($mbPage->id) {
      $mbPage->delete();
      $this->message('Deleted Page: '.$mbPage->path);
    }

    $permission = $this->wire('permissions')->get(self::PagePermission);
    if ($permission->id){
      $permission->delete();
      $this->message('Deleted Permission: '.self::PagePermission);
    }
  }

  protected function add_record($vt, $ip_addr, $country_name, $country_image, $browser_name, $browser_image, $os_name, $os_image, $request, $origin) {
    $query = $this->database->prepare("INSERT INTO ".self::dbTableIp." (ip) VALUES (:ip) ON DUPLICATE KEY UPDATE id = LAST_INSERT_ID(id)");
    $query->bindValue(':ip', $ip_addr, \PDO::PARAM_STR);
    if (!$query->execute()) {
      wire('log')->error($this->className.' INSERT '.self::dbTableIp.' '.$query->errorCode().' '.print_r($query->errorInfo(), true));
      return;
    }
    $id_ip = $this->database->lastInsertId();
    if ($id_ip == 0) {
        wire('log')->message($this->className.' id_ip 0');
        return;
    }

    $query = $this->database->prepare("INSERT INTO ".self::dbTableCountry." (country,countryimg) VALUES (:country_name,:country_image) ON DUPLICATE KEY UPDATE id = LAST_INSERT_ID(id)");
    $query->bindValue(':country_name', $country_name, \PDO::PARAM_STR);
    $query->bindValue(':country_image', $country_image, \PDO::PARAM_STR);
    if (!$query->execute()) {
      wire('log')->error($this->className.' INSERT '.self::dbTableCountry.' '.$query->errorCode().' '.print_r($query->errorInfo(), true));
      return;
    }
    $id_country = $this->database->lastInsertId();
    if ($id_country == 0) {
        wire('log')->message($this->className.' id_country 0');
        return;
    }

    $query = $this->database->prepare("INSERT INTO ".self::dbTableBrowser." (browser,browserimg) VALUES (:browser_name,:browser_image) ON DUPLICATE KEY UPDATE id = LAST_INSERT_ID(id)");
    $query->bindValue(':browser_name', $browser_name, \PDO::PARAM_STR);
    $query->bindValue(':browser_image', $browser_image, \PDO::PARAM_STR);
    if (!$query->execute()) {
      wire('log')->error($this->className.' INSERT '.self::dbTableBrowser.' '.$query->errorCode().' '.print_r($query->errorInfo(), true));
      return;
    }
    $id_browser = $this->database->lastInsertId();
    if ($id_browser == 0) {
        wire('log')->message($this->className.' id_browser 0');
        return;
    }

    $query = $this->database->prepare("INSERT INTO ".self::dbTableOs." (os,osimg) VALUES (:os_name,:os_image) ON DUPLICATE KEY UPDATE id = LAST_INSERT_ID(id)");
    $query->bindValue(':os_name', $os_name, \PDO::PARAM_STR);
    $query->bindValue(':os_image', $os_image, \PDO::PARAM_STR);
    if (!$query->execute()) {
      wire('log')->error($this->className.' INSERT '.self::dbTableOs.' '.$query->errorCode().' '.print_r($query->errorInfo(), true));
      return;
    }
    $id_os = $this->database->lastInsertId();
    if ($id_os == 0) {
        wire('log')->message($this->className.' id_os 0');
        return;
    }

    $query = $this->database->prepare("INSERT INTO ".self::dbTablePage." (page) VALUES (:request) ON DUPLICATE KEY UPDATE id = LAST_INSERT_ID(id)");
    $query->bindValue(':request', $request, \PDO::PARAM_STR);
    if (!$query->execute()) {
      wire('log')->error($this->className.' INSERT '.self::dbTablePage.' '.$query->errorCode().' '.print_r($query->errorInfo(), true));
      return;
    }
    $id_request = $this->database->lastInsertId();
    if ($id_request == 0) {
        wire('log')->message($this->className.' id_request 0');
        return;
    }

    $query = $this->database->prepare("INSERT INTO ".self::dbTableOrigin." (origin) VALUES (:origin) ON DUPLICATE KEY UPDATE id = LAST_INSERT_ID(id)");
    $query->bindValue(':origin', $origin, \PDO::PARAM_STR);
    if (!$query->execute()) {
      wire('log')->error($this->className.' INSERT '.self::dbTableOrigin.' '.$query->errorCode().' '.print_r($query->errorInfo(), true));
      return;
    }
    $id_origin = $this->database->lastInsertId();
    if ($id_origin == 0) {
        wire('log')->message($this->className.' id_origin 0');
        return;
    }

    if ($vt != '') {
      $query = $this->database->prepare("INSERT INTO ".self::dbTableMain." (tm,vt,ip_id,country_id,browser_id,os_id,page_id,origin_id) VALUES (NOW(),:vt,:id_ip,:id_country,:id_browser,:id_os,:id_request,:id_origin)");
      $query->bindValue(':vt', $vt, \PDO::PARAM_INT);
    } else {
      $query = $this->database->prepare("INSERT INTO ".self::dbTableMain." (tm,ip_id,country_id,browser_id,os_id,page_id,origin_id) VALUES (NOW(),:id_ip,:id_country,:id_browser,:id_os,:id_request,:id_origin)");
    }
    $query->bindValue(':id_ip', $id_ip, \PDO::PARAM_INT);
    $query->bindValue(':id_country', $id_country, \PDO::PARAM_INT);
    $query->bindValue(':id_browser', $id_browser, \PDO::PARAM_INT);
    $query->bindValue(':id_os', $id_os, \PDO::PARAM_INT);
    $query->bindValue(':id_request', $id_request, \PDO::PARAM_INT);
    $query->bindValue(':id_origin', $id_origin, \PDO::PARAM_INT);
    if (!$query->execute()) {
      wire('log')->error($this->className.' INSERT '.self::dbTableMain.' '.$query->errorCode().' '.print_r($query->errorInfo(), true));
    }
  }

  public function init() {
    $this->addHookAfter('Page::render', $this, 'ProcessPageViewHook');

    $data = $this->modules->getModuleConfigData($this->className);
    $defaults = $this->modules->get($this->className)->getDefaultData();
    $data = array_merge($defaults, $data);

    if ($data['record_time'] == '1') {
      $this->addHookBefore('ProcessPageView::pageNotFound', $this, 'ProcessPageViewReceiver');
    }

    if ($this->wire('modules')->isInstalled('LazyCron')) {
      if ($data['auto_update_ip2loc'] == '1') {
        $this->addHook('LazyCron::every4Weeks', $this, 'ProcessPageViewIPlocUpdate');
      }
    }
  }

  public function ProcessPageViewIPlocUpdate(HookEvent $event) {
    require_once(__DIR__.'/func/IPlocUpdate.php');
    wire('log')->message(auto_download('https://download.ip2location.com/lite/IP2LOCATION-LITE-DB1.BIN.ZIP', __DIR__.'/iploc/', 'IP2LOCATION-LITE-DB1.BIN.ZIP'));
    wire('log')->message(auto_download('https://download.ip2location.com/lite/IP2LOCATION-LITE-DB1.IPV6.BIN.ZIP', __DIR__.'/iploc/', 'IP2LOCATION-LITE-DB1.IPV6.BIN.ZIP'));
  }

  public function ProcessPageViewReceiver(HookEvent $event) {
    $page = $event->object;

    if ($event->arguments[1] == '/vts/') {
      $vt = $this->input->get('t', 'int', 0);
      if ($vt == 0) exit(0);

      $ip_addr = getenv('REMOTE_ADDR');
      if ($ip_addr == '') exit(0);

      require_once(__DIR__.'/func/IP2Location.php');
      if (strpos($ip_addr, ':') > 0) {
        if (file_exists(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.IPV6.BIN')) {
          $db = new \Database(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.IPV6.BIN', \Database::FILE_IO);
          $temp_records = $db->lookup($ip_addr, \Database::ALL);
          $country_name = $temp_records['countryName'];
          $country_image = strtolower($temp_records['countryCode']);
        }
      } else {
        if (file_exists(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.BIN')) {
          $db = new \Database(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.BIN', \Database::FILE_IO);
          $temp_records = $db->lookup($ip_addr, \Database::ALL);
          $country_name = $temp_records['countryName'];
          $country_image = strtolower($temp_records['countryCode']);
        }
      }
      if (($country_name == '') || ($country_name == '-')) $country_name = 'Unknown';
      if (($country_image == '') || ($country_image == '-')) $country_image = 'unknown';

      require_once(__DIR__.'/func/images.php');
      $browser_name = '';
      $browser_image = 'unknown';
      $os_name = '';
      $os_image = 'unknown';
      if (isset($_SERVER['HTTP_USER_AGENT'])) {
        require_once(__DIR__.'/func/useragent.php');
        $browser = new \parseUserAgentStringClass();
        $browser->includeAndroidName = true;
        $browser->includeWindowsName = true;
        $browser->includeMacOSName = true;
        $browser->parseUserAgentString($_SERVER['HTTP_USER_AGENT']);
        $browser_name = $browser->browsername;
        $browser_image = get_browser_img(strtolower($browser_name));
        if ($browser->browserversion != '') {
          $browser_name = $browser_name.' '.$browser->browserversion;
        }
        $os_name = $browser->osname;
        $os_image = get_os_img(strtolower($os_name));
      }
      if ($browser_name == '') {
        if (isset($browser)) {
          if ($browser->type != '') {
            if ($browser->type == 'Unknown') {
              $browser_name .= $browser->fullname;
            } else {
              $browser_name .= $browser->fullname.' ('.$browser->type.')';
            }
          } else {
            if (($browser->userAgentString == '') || ($browser->fullname != '')) {
              if ($browser->fullname != '') {
                $browser_name = $browser->fullname.' (Unknown)';
              } else {
                $browser_name = 'Unknown';
              }
            } else {
              $browser_name = '';
            }
          }
          $browser_image = get_browser_img(strtolower($browser_name));
        }
      }

      $request = $this->input->get('u', 'text');
      if (stripos(' '.$request, 'https://'.$_SERVER['SERVER_NAME']) == 1) {
        $request = substr($request, strlen('https://'.$_SERVER['SERVER_NAME']));
      }
      if (stripos(' '.$request, 'http://'.$_SERVER['SERVER_NAME']) == 1) {
        $request = substr($request, strlen('http://'.$_SERVER['SERVER_NAME']));
      }
      $request = substr($request, 0, 255);

      $origin = $this->input->get('r', 'text');
      if (stripos(' '.$origin, 'https://'.$_SERVER['SERVER_NAME']) == 1) {
        $origin = substr($origin, strlen('https://'.$_SERVER['SERVER_NAME']));
      }
      if (stripos(' '.$origin, 'http://'.$_SERVER['SERVER_NAME']) == 1) {
        $origin = substr($origin, strlen('http://'.$_SERVER['SERVER_NAME']));
      }
      $origin = substr($origin, 0, 255);
      
      $this->add_record($vt, $ip_addr, $country_name, $country_image, $browser_name, $browser_image, $os_name, $os_image, $request, $origin);

      exit(0);
    }
  }

  public function ProcessPageViewHook(HookEvent $event) {
    $page = $event->object;

    $data = $this->modules->getModuleConfigData($this->className);
    $defaults = $this->modules->get($this->className)->getDefaultData();
    $data = array_merge($defaults, $data);

    if ($data['record_hidden'] != '1') {
      if ($page->isHidden()) return;
    }

    if ($data['record_admin'] != '1') {
      if ($page->template == 'admin') return;
    }

    if ($data['record_loggedin'] != '1') {
      if (wire('user')->isLoggedin()) return;
    }

    if ($data['record_404'] != '1') {
      if (strpos($page->url, '/http404/') !== false) return;
    }
    
    if ($data['record_time'] == '1') {
      $buffer = $event->return;
      require_once(__DIR__.'/func/javascript.php');
      $buffer = str_replace('<body>', '<body><script>'.$javascript.'</script>', $buffer);
      $event->return = $buffer;
    }

    $ip_addr = getenv('REMOTE_ADDR');
    if ($ip_addr == '') return;

    require_once(__DIR__.'/func/IP2Location.php');
    if (strpos($ip_addr, ':') > 0) {
      if (file_exists(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.IPV6.BIN')) {
        $db = new \Database(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.IPV6.BIN', \Database::FILE_IO);
        $temp_records = $db->lookup($ip_addr, \Database::ALL);
        $country_name = $temp_records['countryName'];
        $country_image = strtolower($temp_records['countryCode']);
      }
    } else {
      if (file_exists(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.BIN')) {
        $db = new \Database(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.BIN', \Database::FILE_IO);
        $temp_records = $db->lookup($ip_addr, \Database::ALL);
        $country_name = $temp_records['countryName'];
        $country_image = strtolower($temp_records['countryCode']);
      }
    }
    if (($country_name == '') || ($country_name == '-')) $country_name = 'Unknown';
    if (($country_image == '') || ($country_image == '-')) $country_image = 'unknown';

    require_once(__DIR__.'/func/images.php');
    $browser_name = '';
    $browser_image = 'unknown';
    $os_name = '';
    $os_image = 'unknown';
    if (isset($_SERVER['HTTP_USER_AGENT'])) {
      require_once(__DIR__.'/func/useragent.php');
      $browser = new \parseUserAgentStringClass();
      $browser->includeAndroidName = true;
      $browser->includeWindowsName = true;
      $browser->includeMacOSName = true;
      $browser->parseUserAgentString($_SERVER['HTTP_USER_AGENT']);
      $browser_name = $browser->browsername;
      $browser_image = get_browser_img(strtolower($browser_name));
      if ($browser->browserversion != '') {
        $browser_name = $browser_name.' '.$browser->browserversion;
      }
      $os_name = $browser->osname;
      $os_image = get_os_img(strtolower($os_name));
    }
    if ($browser_name == '') {
      if (isset($browser)) {
        if ($browser->type != '') {
          if ($browser->type == 'Unknown') {
            $browser_name .= $browser->fullname;
          } else {
            $browser_name .= $browser->fullname.' ('.$browser->type.')';
          }
        } else {
          if (($browser->userAgentString == '') || ($browser->fullname != '')) {
            if ($browser->fullname != '') {
              $browser_name = $browser->fullname.' (Unknown)';
            } else {
              $browser_name = 'Unknown';
            }
          } else {
            $browser_name = '';
          }
        }
        $browser_image = get_browser_img(strtolower($browser_name));
      }
    }

    $request = $this->wire('sanitizer')->entities($_SERVER['REQUEST_URI']);
    $request = substr($request, 0, 255);

    if (isset($_SERVER['HTTP_REFERER'])) {
      $origin = $this->wire('sanitizer')->entities($_SERVER['HTTP_REFERER']);
      if (stripos(' '.$origin, 'https://'.$_SERVER['SERVER_NAME']) == 1) {
        $origin = substr($origin, strlen('https://'.$_SERVER['SERVER_NAME']));
      }
      if (stripos(' '.$origin, 'http://'.$_SERVER['SERVER_NAME']) == 1) {
        $origin = substr($origin, strlen('http://'.$_SERVER['SERVER_NAME']));
      }
      $origin = substr($origin, 0, 255);
    } else {
      $origin = '';
    }

    $this->add_record('', $ip_addr, $country_name, $country_image, $browser_name, $browser_image, $os_name, $os_image, $request, $origin);
  }

  static public function getDefaultData() {
    return array(
      'whois_service' => 'https://whatismyipaddress.com/ip/%s',
      'row_limit' => 100,
      'time_format' => 'H:i:s',
      'time_zone' => 'UTC',
      'record_loggedin' => 1,
      'record_hidden' => 1,
      'auto_update_ip2loc' => 1
    );
  }

  public function __construct() {
     foreach(self::getDefaultData() as $key => $value) {
       $this->$key = $value;
     }
  }

  static public function getModuleConfigInputfields(array $data) {
    $fields = new InputfieldWrapper();
    $modules = wire('modules');
    $defaults = self::getDefaultData();
    $data = array_merge($defaults, $data);

    $field = $modules->get('InputfieldText');
    $field->name = 'whois_service';
    $field->label = __('Whois Service');
    $field->description = __('Opens the specified Whois service when clicking on the IP address. Note the place holder %s for the IP address.');
    $field->required = true;
    $field->value = $data['whois_service'];
    $fields->add($field);

    $field = $modules->get('InputfieldSelect');
    $field->name = 'row_limit';
    $field->label = __('Row Limit');
    $field->description = __('Number of rows visible at once.');
    $field->required = true;
    $field->addOptions(array(
      '10' => '10',
      '20' => '20',
      '25' => '25',
      '50' => '50', 
      '75' => '75', 
      '100' => '100',
      '250' => '250',
      '500' => '500',
      '750' => '750',
      '1000' => '1000'
    ));
    $field->value = $data['row_limit'];
    $fields->add($field);

    $dt = new \DateTime();
    $field = $modules->get('InputfieldSelect');
    $field->name = 'time_format';
    $field->label = __('Time Format');
    $field->description = __('Format of the displayed time.');
    $field->required = true;
    $field->addOptions(array(
      'H:i:s' => $dt->format('H:i:s'),
      'h:i:s A' => $dt->format('h:i:s A')
    ));
    $field->value = $data['time_format'];
    $fields->add($field);

    $timezoneIdentifiers = \DateTimeZone::listIdentifiers();
    $utcTime = new \DateTime('now', new \DateTimeZone('UTC'));
    $timezones = array();
    foreach ($timezoneIdentifiers as $timezoneIdentifier) {
      $currentTimezone = new \DateTimeZone($timezoneIdentifier);
      $sign = ((int)$currentTimezone->getOffset($utcTime) > 0) ? '+' : '-';
      $offset = gmdate('H:i', abs((int)$currentTimezone->getOffset($utcTime)));
      $timezones[$timezoneIdentifier] = 'UTC '.$sign.' '.$offset.' '.str_replace('_', ' ', $timezoneIdentifier);
    }

    $field = $modules->get('InputfieldSelect');
    $field->name = 'time_zone';
    $field->label = __('Timezone');
    $field->description = __('Timezone of the displayed time.');
    $field->required = true;
    $field->addOptions($timezones);
    $field->value = $data['time_zone'];
    $fields->add($field);

    $field = $modules->get('InputfieldCheckbox');
    $field->name = 'record_admin';
    $field->label = __('Record Admin Template');
    $field->description = __('Records pages with admin template.');
    $field->attr('name', 'record_admin');
    $field->attr('checked', $data['record_admin'] ? 'checked' : '');
    $fields->add($field);

    $field = $modules->get('InputfieldCheckbox');
    $field->name = 'record_loggedin';
    $field->label = __('Record Loggedin User');
    $field->description = __('Records pages visited by loggedin users.');
    $field->attr('name', 'record_loggedin');
    $field->attr('checked', $data['record_loggedin'] ? 'checked' : '');
    $fields->add($field);

    $field = $modules->get('InputfieldCheckbox');
    $field->name = 'record_404';
    $field->label = __('Record 404 Pages');
    $field->description = __('Records pages redirected to the 404 page (http404).');
    $field->attr('name', 'record_404');
    $field->attr('checked', $data['record_404'] ? 'checked' : '');
    $fields->add($field);

    $field = $modules->get('InputfieldCheckbox');
    $field->name = 'record_hidden';
    $field->label = __('Record hidden Pages');
    $field->description = __('Records hidden pages.');
    $field->attr('name', 'record_hidden');
    $field->attr('checked', $data['record_hidden'] ? 'checked' : '');
    $fields->add($field);

    $field = $modules->get('InputfieldCheckbox');
    $field->name = 'record_time';
    $field->label = __('Record view time');
    $field->description = __('Records the time of view in seconds. If activated you will find a new column (S.) in the records which means the time of view in seconds.');
    $field->attr('name', 'record_time');
    $field->attr('checked', $data['record_time'] ? 'checked' : '');
    $fields->add($field);

    $field = $modules->get('InputfieldCheckbox');
    $field->name = 'auto_update_ip2loc';
    $field->label = __('Automatically Update IP2Location Database');
    $temp = __('IPv4 database file time: ');
    if (file_exists(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.BIN')) {
      $temp .= date("F d Y H:i:s", filemtime(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.BIN')).' (UTC)';
    } else {
      $temp .= __('File not exists');
    }
    $temp .= "\n".__('IPv6 database file time: ');
    if (file_exists(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.IPV6.BIN')) {
      $temp .= date("F d Y H:i:s", filemtime(__DIR__.'/iploc/IP2LOCATION-LITE-DB1.IPV6.BIN')).' (UTC)';
    } else {
      $temp .= __('File not exists.');
    }
    $field->notes = $temp;
    $field->description = __('Automatically download the IP2Location database monthly. This database is required to obtain the country from the IP address. Please note, that automatically download will not work if your webspace does not allow allow_url_fopen.');
    $field->attr('name', 'auto_update_ip2loc');
    $field->attr('checked', $data['auto_update_ip2loc'] ? 'checked' : '');
    $fields->add($field);
/* ToDo: Manually Upload
    $field = $modules->get('InputfieldFile');
    $field->name = 'manually_upload';
    $field->label = __('Manually Upload IP2Location Database');
    $field->description = __('Manually upload the *.BIN files.');
    $field->notes = 'Download, extract and upload IP2LOCATION-LITE-DB1.BIN and IP2LOCATION-LITE-DB1.IPV6.BIN.ZIP from here: https://download.ip2location.com/lite/IP2LOCATION-LITE-DB1.BIN.ZIP and IP2LOCATION-LITE-DB1.IPV6.BIN here: https://download.ip2location.com/lite/IP2LOCATION-LITE-DB1.IPV6.BIN.ZIP';
    $field->required = false;
    $field->destinationPath = __DIR__.'/iploc/';
    $field->extensions = 'BIN';
    $field->value = '';
    $fields->add($field);
*/
    return $fields;
  }

  public function ___execute(){
    $chart_max = 100;

    $data = $this->modules->getModuleConfigData($this->className);
    $defaults = $this->modules->get($this->className)->getDefaultData();
    $data = array_merge($defaults, $data);

    $timezone = $data['time_zone'];
    $timeformat = $data['time_format'];
    $rowlimit = $data['row_limit'];
    $whois = $data['whois_service'];

    $module_url = $this->config()->urls->siteModules.$this->className;
    $this->config()->scripts->add($module_url.'/dragscroll.js');
    $this->config()->styles->add($module_url.'/pvs.css');

    $view = $this->input->post('view', 'int', 0);
    if (!isset($view)) $view = 0;
    if ($view < 0) $view = 0;
    if ($view > 3) $view = 3;

    $start = $this->input->post('start', 'int', 0);
    if (!isset($start)) $start = 0;
    if ($start < 0) $start = 0;

    $year = $this->input->post('year', 'int', 0);
    if (!isset($year)) $year = 0;
    $month = $this->input->post('month', 'int', 0);
    if (!isset($month)) $month = 0;
    $day = $this->input->post('day', 'int', 0);
    if (!isset($day)) $day = 0;

    $s = sprintf('%04d-%02d-%02d', $year, $month, $day);
    $d = \DateTime::createFromFormat('Y-m-d', $s);
    if ($d && $d->format('Y-m-d') == $s) {
      $date = new \DateTime($d->format('Y-m-d'), new \DateTimeZone($timezone));
    } else {
      $date = new \DateTime('now', new \DateTimeZone($timezone));
      $s = $date->format('Y-m-d');
      $month = date('m', strtotime($s));
      $year = date('Y', strtotime($s));
      $day = date('d', strtotime($s));
      $date = new \DateTime($s, new \DateTimeZone($timezone));
    }

    switch ($view) {
      case 0:
        $utcfrom = $date->format('U');
        $date->modify('+1 day');
        $utcto = $date->format('U');
        break;
      case 1:
        $date->modify('first day of this month 00:00:00');
        $utcfrom = $date->format('U');
        $date->modify('+1 month');
        $utcto = $date->format('U');
        break;
      case 2:
        $date->modify('first day of January this year 00:00:00');
        $utcfrom = $date->format('U');
        $date->modify('+1 year');
        $utcto = $date->format('U');
        break;
    }

    if ($view > 0) {
      $dateTimeZone = new \DateTimeZone($timezone);
      $offset = $dateTimeZone->getOffset(new \DateTime('now', new \DateTimeZone('UTC')));
      if ($offset < 0) {
        $timeoffset = '-'.gmdate('H:i', -$offset);
      } else {
        $timeoffset = '+'.gmdate('H:i', $offset);
      }
    }

    $result = '<form method="POST" id="id_filter">';
      $view_text = array($this->_('Day'), $this->_('Month'), $this->_('Year'), $this->_('Total'));
      $result .= '<select name="view" onchange="document.getElementById(\'id_filter\').submit();">';
      for ($i = 0; $i <= 3; $i++) {
        $result .= '<option value="'.$i.'"';
          if ($i == $view) $result .= ' selected="selected"';
        $result .= '>'.$view_text[$i].'</option>';
      }
      $result .= '</select>';
      $result .= '<select name="day"';
      if ($view > 0) $result .= ' style="display:none"';
      $result .= ' onchange="document.getElementById(\'id_filter\').submit();">';
      $daysofmonth = cal_days_in_month(CAL_GREGORIAN, $month, $year);
      for ($i = 1; $i <= $daysofmonth; $i++) {
        $result .= '<option value="'.$i.'"';
          if ($i == $day) $result .= ' selected="selected"';
        $result .= '>'.$i.'</option>';
      }
      $result .= '</select>';
      $result .= '<select name="month"';
      if ($view > 1) $result .= ' style="display:none"';
      $result .= ' onchange="document.getElementById(\'id_filter\').submit();">';
      for ($i = 1; $i <= 12; $i++) {
        $result .= '<option value="'.$i.'"';
          if ($i == $month) $result .= ' selected="selected"';
        $month_name = \DateTime::createFromFormat('!m', $i);
        $result .= '>'.$month_name->format('F').'</option>';
      }
      $result .= '</select>';
      $result .= '<select name="year"';
      if ($view > 2) $result .= ' style="display:none"';
      $result .= ' onchange="document.getElementById(\'id_filter\').submit();">';
      for ($i = 2000; $i <= 2040; $i++) {
        $result .= '<option value="'.$i.'"';
          if ($i == $year) $result .= ' selected="selected"';
        $result .= '>'.$i.'</option>';
      }
      $result .= '</select>';
      $result .= '<button title="'.$this->_('Update').'" id="id_update" style="background-image:url(\''.$module_url.'/images/update.png\')" onclick="document.getElementById(\'id_filter\').submit();">&nbsp;</button>';
    $result .= '</form>';

    if ($view == 0) {
      $sql = "SELECT SQL_CALC_FOUND_ROWS ".
             "UNIX_TIMESTAMP(tm),vt,i.ip,c.country,c.countryimg,b.browser,b.browserimg,o.os,o.osimg,p.page,r.origin ".
             "FROM ".self::dbTableMain." m ".
             "JOIN ".self::dbTableIp." i ON m.ip_id = i.id ".
             "JOIN ".self::dbTableCountry." c ON m.country_id = c.id ".
             "JOIN ".self::dbTableBrowser." b ON m.browser_id = b.id ".
             "JOIN ".self::dbTableOs." o ON m.os_id = o.id ".
             "JOIN ".self::dbTablePage." p ON m.page_id = p.id ".
             "JOIN ".self::dbTableOrigin." r ON m.origin_id = r.id ".
             "WHERE tm >= FROM_UNIXTIME(:utcfrom) AND tm < FROM_UNIXTIME(:utcto) ".
             "ORDER BY tm DESC LIMIT :start,:rowlimit";
      $query = $this->database->prepare($sql);
      $query->bindValue(':utcfrom', $utcfrom, \PDO::PARAM_INT);
      $query->bindValue(':utcto', $utcto, \PDO::PARAM_INT);
      $query->bindValue(':start', $start, \PDO::PARAM_INT);
      $query->bindValue(':rowlimit', $rowlimit, \PDO::PARAM_INT);
      if (!$query->execute()) {
        return;
      }

      $temp1 = $this->database->query("SELECT FOUND_ROWS()");
      $temp2 = $temp1->fetch();
      if (is_numeric($temp2[0])) {
        $rows = $temp2[0];
      } else {
        $rows = 0;
      }

      $data = $this->modules->getModuleConfigData($this->className);
      $defaults = $this->modules->get($this->className)->getDefaultData();
      $data = array_merge($defaults, $data);

      if ($rowlimit < $rows) {
        $result .= '<form method="POST" id="id_pagination">';
          $result .= '<input type="hidden" name="day" value="'.$day.'">';
          $result .= '<input type="hidden" name="month" value="'.$month.'">';
          $result .= '<input type="hidden" name="year" value="'.$year.'">';
          $result .= '<input type="hidden" name="view" value="'.$view.'">';
          $result .= '<select name="start" id="id_pageselect" onchange="document.getElementById(\'id_pagination\').submit();"></select>';
          $result .= '<script>';
            $result .= 'var sel2 = document.getElementById("id_pageselect");';
            $result .= 'for (var i = 0; i < '.$rows.'; i+='.$rowlimit.') {';
              $result .= 'var opt = document.createElement("option");';
              $result .= 'if (('.$start.' >= i) && ('.$start.' < (i+'.$rowlimit.'))) {';
                $result .= 'opt.value = i;';
                $result .= 'opt.selected = "selected"';
              $result .= '} else {';
                $result .= 'opt.value = i;';
              $result .= '}';
              $result .= 'if ((i+'.$rowlimit.') > '.$rows.') {';
                $result .= 'opt.text = (i+1) + " - " + '.$rows.' + " ";';
              $result .= '} else {';
                $result .= 'opt.text = (i+1) + " - " + (i+'.$rowlimit.') + " ";';
              $result .= '}';
              $result .= 'sel2.appendChild(opt);';
            $result .= '}';
          $result .= '</script>';
        $result .= '</form>';
        $result .= '<div class="pvs_clear"></div>';
      }

      $result .= '<div class="dragscroll">';
        $result .= '<div class="pvs_table">';
          $result .= '<div class="pvs_thead">';
            $result .= '<div class="pvs_th"><abbr title="'.$this->_('Time, relative to the specified timezone').'">'.$this->_('Time').'</abbr></div>';
            $result .= '<div class="pvs_th"><abbr title="'.$this->_('Country of IP address').'">'.$this->_('C.').'</abbr></div>';
            $result .= '<div class="pvs_th">'.$this->_('IP address').'</div>';
            $result .= '<div class="pvs_th"><abbr title="'.$this->_('Operating system').'">'.$this->_('O.').'</abbr></div>';
            $result .= '<div class="pvs_th"><abbr title="'.$this->_('Browser').'">'.$this->_('B.').'</abbr></div>';
            if ($data['record_time'] == '1') {
              $result .= '<div class="pvs_th"><abbr title="'.$this->_('Time of view in seconds').'">'.$this->_('S.').'</abbr></div>';
            }
            $result .= '<div class="pvs_th">'.$this->_('Page').'</div>';
            $result .= '<div class="pvs_th">'.$this->_('Origin').'</div>';
          $result .= '</div>';
        $datetime = new \DateTime();
        $datetime->setTimezone(new \DateTimeZone($timezone));
        $lnmode = ' pvs_ln';
        while ($record = $query->fetch(\PDO::FETCH_ASSOC)) {
          if ($lnmode == '') {
            $lnmode = ' pvs_ln';
          } else {
            $lnmode = '';
          }
          $result .= '<div class="pvs_tr">';
            $result .= '<div class="pvs_tt'.$lnmode.'">';
              $datetime->setTimestamp($record['UNIX_TIMESTAMP(tm)']);
              $result .= $datetime->format($timeformat);
            $result .= '</div>';
            $result .= '<div class="pvs_td'.$lnmode.'">';
              $result .= '<img class="pvs_img" src="'.$module_url.'/images/country/'.$record['countryimg'].'.png" alt="'.$record['country'].'" title="'.$record['country'].'" />';
            $result .= '</div>';  
            $result .= '<div class="pvs_td'.$lnmode.'">';
              $result .= '<a href="'.sprintf($whois, $record['ip']).'" target="_blank">'.$record['ip'].'</a>';
            $result .= '</div>';
            $result .= '<div class="pvs_td'.$lnmode.'">';
              $result .= '<img class="pvs_img" src="'.$module_url.'/images/os/'.$record['osimg'].'.png" alt="'.$record['os'].'" title="'.$record['os'].'" />';
            $result .= '</div>';  
            $result .= '<div class="pvs_td'.$lnmode.'">';
              $result .= '<img class="pvs_img" src="'.$module_url.'/images/browser/'.$record['browserimg'].'.png" alt="'.$record['browser'].'" title="'.$record['browser'].'" />';
            $result .= '</div>';
            if ($data['record_time'] == '1') {
              $result .= '<div class="pvs_td'.$lnmode.'">';
              if ((isset($record['vt'])) && ($record['vt'] != '0')) {
                $result .= $record['vt'];
              } else {
                $result .= '-';
              }
              $result .= '</div>';
            }
            $result .= '<div class="pvs_td'.$lnmode.'">';
              $result .= '<a href="'.$record['page'].'" target="_blank">'.$record['page'].'</a>';
            $result .= '</div>';
            $result .= '<div class="pvs_td'.$lnmode.'">';
              $result .= '<a href="'.$record['origin'].'" target="_blank">'.$record['origin'].'</a>';
            $result .= '</div>';
          $result .= '</div>';  
        }
        $result .= '</div>';
      $result .= '</div>';
    }

    if ($view == 1) {
      $sql = "SELECT DAY(CONVERT_TZ(tm,@@session.time_zone,:timeoffset)) as dt, COUNT(DISTINCT ip_id) AS totalcount FROM ".self::dbTableMain." WHERE tm >= FROM_UNIXTIME(:utcfrom) AND tm < FROM_UNIXTIME(:utcto) GROUP BY dt ASC";
      $query = $this->database->prepare($sql);
      $query->bindValue(':timeoffset', $timeoffset, \PDO::PARAM_STR);
      $query->bindValue(':utcfrom', $utcfrom, \PDO::PARAM_INT);
      $query->bindValue(':utcto', $utcto, \PDO::PARAM_INT);
      if (!$query->execute()) {
        return;
      }

      $records = $query->fetchAll(\PDO::FETCH_ASSOC);

      $max = 0;
      foreach ($records as $record) {
        if ($max < $record['totalcount']) $max = $record['totalcount'];
      }

      $result .= '<div class="dragscroll">';
        $result .= '<div class="pvs_table">';
          $result .= '<div class="pvs_thead">';
            $result .= '<div class="pvs_th pvs_alr">'.$this->_('Day').'</div>';
            $result .= '<div class="pvs_th pvs_alr">'.$this->_('Week Day').'</div>';
            $result .= '<div class="pvs_th pvs_alr">'.$this->_('Visitors').'</div>';
            $result .= '<div class="pvs_th">'.$this->_('Chart').'</div>';
          $result .= '</div>';
        $daysofmonth = cal_days_in_month(CAL_GREGORIAN, $month, $year);
        for ($i = 1; $i <= $daysofmonth; $i++) {
          $result .= '<div class="pvs_tr">';
            $result .= '<div class="pvs_td pvs_alr">'.$i.'.</div>';
            $result .= '<div class="pvs_td pvs_alr">'.date('l', mktime(0, 0, 0, $month, $i, $year)).'</div>';
            $totalcount = 0;
            foreach ($records as $record) {
              if ($record['dt'] == sprintf('%02d', $i)) {
                $totalcount = $record['totalcount'];
                
                break;
              };
            }
            $result .= '<div class="pvs_td pvs_alr">'.$totalcount.'</div>';
            if ($max > 0) {
              $chart = round(($totalcount / $max) * $chart_max);
            } else {
              $chart = 0;
            }
            $result .= '<div class="pvs_td pvs_w100">';
              $result .= '<div class="pvs_chart">';
                $result .= '<div class="pvs_chart_gauge" style="width:'.$chart.'px;"></div>';
              $result .= '</div>';
            $result .= '</div>';
          $result .= '</div>';
        }
        $result .= '</div>';
      $result .= '</div>';
    }

    if ($view == 2) {
      $sql = "SELECT MONTH(CONVERT_TZ(tm,@@session.time_zone,:timeoffset)) as mt, COUNT(DISTINCT ip_id) AS totalcount FROM ".self::dbTableMain." WHERE tm >= FROM_UNIXTIME(:utcfrom) AND tm < FROM_UNIXTIME(:utcto) GROUP BY mt ASC";
      $query = $this->database->prepare($sql);
      $query->bindValue(':timeoffset', $timeoffset, \PDO::PARAM_STR);
      $query->bindValue(':utcfrom', $utcfrom, \PDO::PARAM_INT);
      $query->bindValue(':utcto', $utcto, \PDO::PARAM_INT);
      if (!$query->execute()) {
        return;
      }

      $records = $query->fetchAll(\PDO::FETCH_ASSOC);

      $max = 0;
      foreach ($records as $record) {
        if ($max < $record['totalcount']) $max = $record['totalcount'];
      }

      $result .= '<div class="dragscroll">';
        $result .= '<div class="pvs_table">';
          $result .= '<div class="pvs_thead">';
            $result .= '<div class="pvs_th pvs_alr">'.$this->_('Month').'</div>';
            $result .= '<div class="pvs_th pvs_alr">'.$this->_('Visitors').'</div>';
            $result .= '<div class="pvs_th">'.$this->_('Chart').'</div>';
          $result .= '</div>';
        for ($i = 1; $i <= 12; $i++) {
          $result .= '<div class="pvs_tr">';
            $result .= '<div class="pvs_td pvs_alr">'.date('F', mktime(0, 0, 0, $i)).'</div>';
            $totalcount = 0;
            foreach ($records as $record) {
              if ($record['mt'] == sprintf('%02d', $i)) {
                $totalcount = $record['totalcount'];
              };
            }
            $result .= '<div class="pvs_td pvs_alr">'.$totalcount.'</div>';
            if ($max > 0) {
              $chart = round(($totalcount / $max) * $chart_max);
            } else {
              $chart = 0;
            }
            $result .= '<div class="pvs_td pvs_w100">';
              $result .= '<div class="pvs_chart">';
                $result .= '<div class="pvs_chart_gauge" style="width:'.$chart.'px;"></div>';
              $result .= '</div>';
            $result .= '</div>';
          $result .= '</div>';  
        }
        $result .= '</div>';
      $result .= '</div>';
    }

    if ($view == 3) {
      $sql = "SELECT YEAR(CONVERT_TZ(tm,@@session.time_zone,:timeoffset)) as yt, COUNT(DISTINCT ip_id) AS totalcount FROM ".self::dbTableMain." GROUP BY yt ASC";
      $query = $this->database->prepare($sql);
      $query->bindValue(':timeoffset', $timeoffset, \PDO::PARAM_STR);
      if (!$query->execute()) {
        return;
      }

      $records = $query->fetchAll(\PDO::FETCH_ASSOC);

      $max = 0;
      $first_year = 0;
      $last_year = $first_year - 1;
      foreach ($records as $record) {
        if ($max < $record['totalcount']) $max = $record['totalcount'];
        if ($first_year == 0) {
          $first_year = $record['yt'];
        } else {
          if ($first_year > $record['yt']) $first_year = $record['yt'];
        }
        if ($last_year < $record['yt']) $last_year = $record['yt'];
      }

      $result .= '<div class="dragscroll">';
        $result .= '<div class="pvs_table">';
          $result .= '<div class="pvs_thead">';
            $result .= '<div class="pvs_th pvs_alr">'.$this->_('Year').'</div>';
            $result .= '<div class="pvs_th pvs_alr">'.$this->_('Visitors').'</div>';
            $result .= '<div class="pvs_th">'.$this->_('Chart').'</div>';
          $result .= '</div>';
        for ($i = $first_year; $i <= $last_year; $i++) {
          $result .= '<div class="pvs_tr">';
            $result .= '<div class="pvs_td pvs_alr">'.$i.'</div>';
            $totalcount = 0;
            foreach ($records as $record) {
              if ($record['yt'] == $i) {
                $totalcount = $totalcount + $record['totalcount'];
              };
            }
            $result .= '<div class="pvs_td pvs_alr">'.$totalcount.'</div>';
            if ($max > 0) {
              $chart = round(($totalcount / $max) * $chart_max);
            } else {
              $chart = 0;
            }
            $result .= '<div class="pvs_td pvs_w100">';
              $result .= '<div class="pvs_chart">';
                $result .= '<div class="pvs_chart_gauge" style="width:'.$chart.'px;"></div>';
              $result .= '</div>';
            $result .= '</div>';
          $result .= '</div>';
        }
        $result .= '</div>';
      $result .= '</div>';
    }

    $meta = array(
      'id' => 'moduleConfigLink',
      'href' => "{$this->config->urls->admin}module/edit?name={$this->className}",
      'value' => $this->_('Configuration'),
      'icon' => 'cog'
    );
    $moduleConfigLinkButton = $this->populateInputField($this->modules->get('InputfieldButton'), $meta)->addClass('ui-priority-secondary ui-button-float-right');
    $result .= $moduleConfigLinkButton->render();

    $result .= '<p style="font-size:small;text-align:center">This module uses <a target="_blank" href="https://www.ip2location.com/">IP2Location</a>, <a target="_blank" href="http://github.com/asvd/dragscroll">dragscroll</a> and <a target="_blank" href="https://www.toms-world.org/blog/parseuseragentstring/">parseUserAgentStringClass</a>.</p>';
    
    $result .= '<p><a target="_blank" href="https://www.paypal.me/techcnet/0usd"><img style="margin:auto;" src="'.$module_url.'/images/donate.png" /></a></p>';

    return $result;
  }

  protected function populateInputField($field, $meta){
    foreach ($meta as $metaNames => $metaInfo) {
      $metaNames = explode('+', $metaNames);
      foreach ($metaNames as $metaName) {
        $field->$metaName = $metaInfo;
      }
    }
    return $field;
  }
}